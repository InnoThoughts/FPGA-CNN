//====================================================================
//
// sw_array.sv
//
// Original Author : George Powley
// Original Date   : 2014/08/29
//
// Copyright (c) 2014 Intel Corporation
// Intel Proprietary
//
// Description:
//
//====================================================================

`include "sw.vh"

module sw_array
  #(
    parameter NUM_PE     = 8,
    parameter DATA_WIDTH = 12,
    parameter BP_WIDTH   = 2,
    parameter COST_WIDTH = 5
    )
   (
    input logic clk,
    input logic resetb,
    sw_bus_t    sw_bus
    );

   logic [NUM_PE:0] valid_in;
   logic [BP_WIDTH-1:0] t_in_mid [NUM_PE:0];
   logic [DATA_WIDTH-1:0] max_in [NUM_PE:0];
   logic [DATA_WIDTH-1:0] v_in [NUM_PE:0];
   logic [DATA_WIDTH-1:0] f_in [NUM_PE:0];
   logic [15:0] len_s;
   logic [15:0] len_t;

   //=================================================================
   //=================================================================
   // control FSM
   //=================================================================
   //=================================================================

   
   //-----------------------------------------------------------------
   // FSM inputs
   //-----------------------------------------------------------------

   logic valid_in0_ff;
   logic pass_done;

   always_ff @(posedge clk) begin
      valid_in0_ff <= valid_in[0];
   end

   assign pass_done = ~valid_in[0] & valid_in0_ff;
   
   logic last_pass;
   assign last_pass = len_s <= NUM_PE;

   typedef enum logic [2:0] {IDLE, READ, RUN, FINISH} state_t;

   state_t state;
   state_t next_state;

   // FSM state
   always_ff @(posedge clk) begin
      if (!resetb) begin
         state <= IDLE;
      end else begin
         state <= next_state;
      end
   end

   always_comb begin
      case (state)
        IDLE :
          next_state = sw_bus.start ? READ : IDLE;
        READ :
          next_state = RUN;
        RUN :
          next_state = pass_done && last_pass ? FINISH : RUN;
        FINISH :
          next_state = sw_bus.ready ? IDLE : FINISH;
        default :
          next_state = state;
      endcase // case (state)
   end // always_comb begin

   always_ff @(posedge clk) begin
      if (state == READ) begin
         len_s <= sw_bus.data_a[31:0];
         len_t <= sw_bus.data_a[63:32];
      end else if (pass_done && !last_pass) begin
         len_s <= len_s - NUM_PE;
      end
   end

   logic [511:0] t_shift_reg;
   logic [31:0] valid_count;

   always_ff @(posedge clk) begin
      if (state != RUN || valid_count[7:0] == 8'hff) begin
         t_shift_reg <= sw_bus.data_b;
      end else begin
         t_shift_reg <= {2'b00, t_shift_reg[511:2]};
      end
   end

   always_ff @(posedge clk) begin
      if (state != RUN || pass_done) begin
         valid_count <= -1;
      end else begin
         valid_count <= valid_count + 1;
      end
   end

   assign valid_in[0] = state == RUN && (valid_count < (len_t + 1));

   assign sw_bus.addr_a = state == IDLE ? 0 : 1; // input to S, addr[0] contains len s/t
   assign sw_bus.addr_b = state == IDLE ? 0 : valid_count[15:8] + 1; // input to T
   
   assign t_in_mid[0] = t_shift_reg[1:0];
   
   assign max_in[0] = 0;
   assign v_in[0] = 0;
   assign f_in[0] = 0;

   always_ff @(posedge clk) begin
      if (state == READ) begin
         sw_bus.max_out <= 0;
      end else if (valid_in[NUM_PE]) begin
         sw_bus.max_out <= max(sw_bus.max_out, max_in[NUM_PE]);
      end
   end


   // 2014/04/25: GSP: check this
   always_ff @(posedge clk) begin
      if (!resetb) begin
         sw_bus.ready <= 1;
      end else if (state == READ) begin
         sw_bus.ready <= 0;
      end else if (valid_in[NUM_PE] && !valid_in[NUM_PE-1] && last_pass) begin 
         sw_bus.ready <= 1;
      end
   end
   

   genvar i;
   generate
      for (i = 0; i < NUM_PE; i = i + 1) begin : gen_pe
         sw_pe #(.DATA_WIDTH(DATA_WIDTH), 
                 .BP_WIDTH(BP_WIDTH),
                 .COST_WIDTH(COST_WIDTH)
                 ) 
         sw_pe_i
           (.clk(clk),
            .sw_bus(sw_bus),
            .active_pe(i < len_s),
            // reference string
            .s_in(sw_bus.data_a[BP_WIDTH*i+1:BP_WIDTH*i]),
            // inputs from PEs
            .valid_in(valid_in[i]),
            .t_in(t_in_mid[i]),
            .max_in(max_in[i]),
            .v_in(v_in[i]),
            .f_in(f_in[i]),
            // outputs to PEs
            .valid_out(valid_in[i+1]),
            .t_out(t_in_mid[i+1]),
            .max_out(max_in[i+1]),
            .v_out(v_in[i+1]),
            .f_out(f_in[i+1])
            );
      end
   endgenerate

endmodule // sw_array
