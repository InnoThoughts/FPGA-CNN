`include "sw.vh"

module sw_array(
					input logic clk,
					input logic resetb,
					sw_bus_t 		sw_bus
					);
	
	parameter NUM_BLOCKS = 8;
	parameter NUM_CYCLES = 5 + 7 + 1; //5 cycles for mult, 7 for add
	parameter MIN_CL_COUNT = 12; //randomly selected for the moment
	parameter BUFFER_DEPTH = 256;
	
	typedef enum logic [2:0] {IDLE, RUN, FINISH} state_t;
	
	state_t state;
	state_t next_state;
	logic [31:0] 	cl_count;
	logic [7:0] 	num_cl_per_filter;
	logic [15:0]	num_filters;
	logic [7:0]		filter_counter;
	logic [15:0]	filter_num;
	logic [15:0] 	image_rd_addr;
	logic [15:0] 	weight_rd_addr;
	logic [4:0] 	cycle_count;
	
	// FSM state update
	always_ff @(posedge clk) begin
		if (!resetb) begin
			state <= IDLE;
		end else begin
			state <= next_state;
		end
	end

	always_ff @(posedge clk) begin
		if (!resetb) begin
			num_cl_per_filter <= 0;
			num_filters <= 0;
		end 
		else begin
			num_cl_per_filter <= sw_bus.num_cl_per_filter;
			num_filters <= sw_bus.num_filters;
		end
	end

	
	//finished with an image section once we have gone through all filters
	assign finished = weight_rd_addr == (num_filters * num_cl_per_filter);

	always_comb begin
		case (state)
			IDLE:
				next_state = sw_bus.start ? RUN : IDLE;
			RUN:
				next_state = finished ? FINISH : RUN;
			FINISH:
				next_state = sw_bus.ready ? IDLE : FINISH;
			default:
				next_state = state;
		endcase
	end
	
	//increment weight_rd_addr once per clock cycle
	always_ff @(posedge clk) begin
		if (!resetb || finished) begin
			weight_rd_addr <= 0;
		end 
		else begin
			weight_rd_addr <= weight_rd_addr +1;
		end 
	end

	//increment image_rd_addr once we have finished with every filter
	always_ff @(posedge clk) begin
		if (!resetb) begin
			image_rd_addr <= 0;
		end 
		else if (finished) begin
			image_rd_addr <= image_rd_addr +1;
		end
	end
	
	assign sw_bus.addr_a = state == IDLE ? 0 : weight_rd_addr;
	assign sw_bus.addr_b = state == IDLE ? 0 : image_rd_addr; 

	assign filter_counter_reset = filter_counter == num_cl_per_filter;
	assign filter_num_reset = filter_num == num_filters;

	//keep track of what filter we are on 
	always_ff @(posedge clk) begin
		if (!resetb) begin
			filter_counter <= 0;
			filter_num <= 0;
		end 
		else if (filter_counter_reset) begin
			filter_counter <= 0;
			filter_num <= filter_num +1;
		end
		else if (filter_num_reset) begin
			filter_counter <= 0;
			filter_num <= 0;
		end
		else begin
			filter_counter <= filter_counter +1;
		end
	end

	assign sw_bus.filter_num = filter_num;

	logic [(512*16)-1:0] image_buffer_in;
	logic [(512*16)-1:0] weight_buffer_in;
	logic [31:0] conv_out;
	
	
	//if busy, we're not ready
	always_ff @(posedge clk) begin
		if (!resetb) begin
			sw_bus.ready <= 1;
		end 
		else begin
			sw_bus.ready <= 1;
		end
	end
	
	//if running, fill data and weight buffers
	always_ff @(posedge clk) begin
		if (state == RUN) begin
			weight_buffer_in <= sw_bus.data_a;
			image_buffer_in <= sw_bus.data_b;
		end
	end

	//output conv_out to bus
	always_ff @(posedge clk) begin
		if (!resetb) begin
			sw_bus.result <= 0;
		end 
		else begin
			sw_bus.result <= conv_out;
		end
	end
		
	conv_forward_layer #(.WIDTH(256))
		conv_forward_inst(
											.clk(clk),
											.reset(resetb),
											.id(weight_rd_addr),
											.in_data(image_buffer_in),
											.weight_vec(weight_buffer_in),
											.out_data(conv_out)
										);

	// synthesis translate_off
	always_ff @(posedge clk) begin
		if (weight_buffer_in[31:0] != 0) begin
			$display("///////////////////  RUNNING  ///////////////////");
			$display("num_cl_per_filter: 0x%h, num_filters: 0x%h", num_cl_per_filter, num_filters);
			$display("filter_counter: 0x%h", filter_counter);
			$display("weight_buffer_in: 0x%h", weight_buffer_in[511:0]);
			$display("image_buffer_in: 0x%h", image_buffer_in[511:0]);
			$display("conv state = 0x%h, filter_num: 0x%h, image_rd_addr: 0x%h, weight_rd_addr: 0x%h, sw_bus.result: 0x%h", state, filter_num, image_rd_addr, weight_rd_addr, sw_bus.result);
			$display("/////////////////////////////////////////////////");
			$display("");
		end
	end
	
	always_ff @(posedge clk) begin
		if (conv_out != 0) begin
			$display("(((((((((((((((((( RESULT ))))))))))))))))))");
			$display("RESULT: 0x%h ", conv_out);
			$display("(((((((((((((((((((       )))))))))))))))))))");
			$display("");
		end
	end
	
	
	// synthesis translate_on
	
	
endmodule
						
